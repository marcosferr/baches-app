generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [postgis]
}

model User {
  id                      String                  @id @default(cuid())
  name                    String
  email                   String                  @unique
  password                String
  role                    Role                    @default(CITIZEN)
  avatar                  String?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  comments                Comment[]
  notifications           Notification[]
  notificationPreferences NotificationPreference?
  reports                 Report[]
  reportTimelines         ReportTimeline[]
  badges                  UserBadge[]
  leaderboardEntries      LeaderboardEntry[]
}

model Report {
  id          String                   @id @default(cuid())
  picture     String
  description String
  severity    Severity
  status      Status                   @default(SUBMITTED)
  latitude    Float
  longitude   Float
  address     String?
  authorId    String
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  location    Unsupported("geometry")?
  comments    Comment[]
  timeline    ReportTimeline[]
  author      User                     @relation(fields: [authorId], references: [id])

  @@index([location], map: "location_idx", type: Gist)
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  reportId  String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  report    Report   @relation(fields: [reportId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  read      Boolean          @default(false)
  relatedId String?
  userId    String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id])
}

model NotificationPreference {
  id            String   @id @default(cuid())
  userId        String   @unique
  reportUpdates Boolean  @default(true)
  comments      Boolean  @default(true)
  email         Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
}

model ReportTimeline {
  id             String   @id @default(cuid())
  reportId       String
  previousStatus Status?
  newStatus      Status
  changedById    String
  notes          String?
  createdAt      DateTime @default(now())
  report         Report   @relation(fields: [reportId], references: [id])
  changedBy      User     @relation(fields: [changedById], references: [id])

  @@index([reportId])
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
  status    String   @default("PENDING") // PENDING, REVIEWED, RESPONDED
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

enum Role {
  ADMIN
  CITIZEN
}

enum Severity {
  LOW
  MEDIUM
  HIGH
}

enum Status {
  SUBMITTED
  PENDING
  IN_PROGRESS
  RESOLVED
  REJECTED
}

enum NotificationType {
  REPORT_STATUS
  COMMENT
  APPROVAL
  PRIORITY
  BADGE_EARNED
}

model UserBadge {
  id        String   @id @default(cuid())
  userId    String
  badgeType String
  earnedAt  DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, badgeType])
}

model LeaderboardEntry {
  id        String   @id @default(cuid())
  userId    String
  category  String
  score     Int
  rank      Int
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, category])
  @@index([category, score])
}
